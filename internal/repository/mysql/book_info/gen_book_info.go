///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package book_info

import (
	"fmt"

	"book/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *BookInfo {
	return new(BookInfo)
}

func NewQueryBuilder() *bookInfoQueryBuilder {
	return new(bookInfoQueryBuilder)
}

func (t *BookInfo) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type bookInfoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *bookInfoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *bookInfoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&BookInfo{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *bookInfoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&BookInfo{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *bookInfoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&BookInfo{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *bookInfoQueryBuilder) First(db *gorm.DB) (*BookInfo, error) {
	ret := &BookInfo{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *bookInfoQueryBuilder) QueryOne(db *gorm.DB) (*BookInfo, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *bookInfoQueryBuilder) QueryAll(db *gorm.DB) ([]*BookInfo, error) {
	var ret []*BookInfo
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *bookInfoQueryBuilder) Limit(limit int) *bookInfoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *bookInfoQueryBuilder) Offset(offset int) *bookInfoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *bookInfoQueryBuilder) WhereId(p mysql.Predicate, value int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereIdIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereIdNotIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderById(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WhereName(p mysql.Predicate, value string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereNameIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereNameNotIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByName(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WhereAuthor(p mysql.Predicate, value string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "author", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereAuthorIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "author", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereAuthorNotIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "author", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByAuthor(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "author "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WherePublish(p mysql.Predicate, value string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "publish", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePublishIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "publish", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePublishNotIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "publish", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByPublish(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "publish "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WhereISBN(p mysql.Predicate, value string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "isbn", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereISBNIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "isbn", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereISBNNotIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "isbn", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByISBN(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "isbn "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WhereIntroduction(p mysql.Predicate, value string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "introduction", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereIntroductionIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "introduction", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereIntroductionNotIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "introduction", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByIntroduction(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "introduction "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WhereLanguage(p mysql.Predicate, value string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "language", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereLanguageIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "language", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereLanguageNotIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "language", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByLanguage(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "language "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WherePrice(p mysql.Predicate, value float64) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "price", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePriceIn(value []float64) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "price", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePriceNotIn(value []float64) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "price", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByPrice(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "price "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WherePubdate(p mysql.Predicate, value string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "pubdate", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePubdateIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "pubdate", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePubdateNotIn(value []string) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "pubdate", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByPubdate(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "pubdate "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WhereClassId(p mysql.Predicate, value int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "class_id", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereClassIdIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "class_id", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereClassIdNotIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "class_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByClassId(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "class_id "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WherePressmark(p mysql.Predicate, value int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "pressmark", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePressmarkIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "pressmark", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WherePressmarkNotIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "pressmark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByPressmark(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "pressmark "+order)
	return qb
}

func (qb *bookInfoQueryBuilder) WhereState(p mysql.Predicate, value int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", p),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereStateIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) WhereStateNotIn(value []int32) *bookInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "NOT IN"),
		value,
	})
	return qb
}

func (qb *bookInfoQueryBuilder) OrderByState(asc bool) *bookInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "state "+order)
	return qb
}
